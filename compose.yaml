services:
  frontend:
    build:
      context: frontend
      target: development
    stdin_open: true
    ports:
      - 4000:4000
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    restart: always
    depends_on:
      - backend
    expose:
      - 4000
    labels:
      - "traefik.http.routers.frontend.rule=Host(`front.localhost`)" # Définir la règle de routage
      - "traefik.http.services.frontend.loadbalancer.server.port=4000" # Définir le port du service

  backend:
    restart: always
    build:
      context: backend
      target: development
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - mongo
    networks:
      - express-mongo
    ports:
      - "3000:3000"
    expose: 
      - 3000
    environment:
      - NODE_ENV_PROFILE=production
    labels:
      - "traefik.http.routers.backend.rule=Host(`back.localhost`)" # Définir la règle de routage
      - "traefik.http.services.backend.loadbalancer.server.port=3000" # Définir le port du service
    
  mongo:
    restart: always
    image: mongo:4.2.0
    volumes:
      - ./data:/data/db
    networks:
      - express-mongo
    ports:
      - "27017:27017"
    expose:
      - 27017

  traefik:
    image: traefik:v2.5
    command:
      - --api.insecure=true # Active l'API Traefik en mode non sécurisé (pour les tests seulement)
      - --providers.docker=true # Active la prise en charge des services Docker
    ports:
      - "80:80" # Port pour le trafic HTTP
      - "8080:8080" # Port pour l'API Traefik (facultatif)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Montage du socket Docker pour accéder aux informations sur les conteneurs

networks:
  express-mongo:
